import React from "react";

import "./block-9.scss";

const Block9 = () => {
  /*
    Чаще всего приходится генерировать диаграммы при помощи JavaScript, добавление большого количества
    данных вручную отнимает много времени. При создании SVG-элемента с помощью JS использовать привычный
    document.createElement не получится, так как этот метод создаёт HTML-элементы, а SVG — часть
    спецификации XML. Вместо него можно использовать
    document.createElementNS('http://www.w3.org/2000/svg', 'rect').
    NS означает namespace, то самое пространство имён, которое определяет, к какой спецификации
     принадлежит элемент.
  */
  return (
    <div className="block-9">
      <p>Столбчатая диаграмма</p>
      <svg
        width="500"
        height="400"
        viewBox="0 0 500 400"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g transform="translate(0,400)">
          {/*
            Значение 400 в первой трансформации — это высота картинки. Мы перевернули
            систему координат, и теперь график выглядит правильно.
          */}
          <g transform="scale(1,-1)">
            {/*
              Переворачивает картинку.
             */}
            <rect x="10" y="0" width="45" height="90" fill="coral" />
            <rect x="60" y="0" width="45" height="120" fill="crimson" />
            <rect x="110" y="0" width="45" height="190" fill="coral" />
            <rect x="160" y="0" width="45" height="30" fill="crimson" />
            <rect x="210" y="0" width="45" height="300" fill="coral" />
            <rect x="260" y="0" width="45" height="220" fill="crimson" />
            <rect x="310" y="0" width="45" height="90" fill="coral" />
            <rect x="360" y="0" width="45" height="130" fill="crimson" />
            <rect x="410" y="0" width="45" height="40" fill="crimson" />
            <rect x="460" y="0" width="45" height="180" fill="crimson" />
          </g>
        </g>
      </svg>
      <hr />
      <p>Круговые диаграммы</p>
      {/*
        Здесь потребуется управлять обводкой через свойства stroke-dasharray и stroke-width.

        Алгоритм построения диаграммы:

        1. Задаём ширину и высоту изображению.
        2. Добавляем border-radius: 50% и фон.
        3. Внутри рисуем окружность.
        4. Задаём окружности обводку толщиной равной её диаметру.
        5. Сдвигаем на необходимое расстояние обводку с помощью stroke-dasharray.

        Зачем скруглять элемент SVG, если у нас уже есть окружность внутри и можно взаимодействовать только с ней?

        Дело в том, что обводка рисуется не от центра окружности, а от её внешней стороны. И если задать 10px
        толщину, то 5px обводки будет с внешней стороны окружности, а 5px — с внутренней. Результирующий круг
        получится намного больше, чем исходные размеры диаграммы.
       */}
      <svg
        className="circle-graph"
        width="300"
        height="300"
        viewBox="0 0 300 300"
      >
        <circle
          r="150"
          cx="150"
          cy="150"
          stroke="#ff7f50"
          fill="#f1f1f1"
          /*
            Теперь закрасим её часть. Скажем, 40%. Для этого сначала вычислим, сколько это в пикселях, а затем зададим
            вычисленное значение в атрибут stroke-dasharray следующим образом:

            stroke-dasharray: <вычисленное значение> <длина окружности>

            2πR * 40 / 100 — так выглядит формула, где:

            R — радиус;
            π — число Пи;
            40 — процент закрашенной области.
            Получается 377.
          */
          strokeWidth="300"
          strokeDasharray="377 942"
        />
      </svg>
    </div>
  );
};

export { Block9 };
